name: Update Kubernetes Versions

on:
  pull_request:
    branches:
      - main
  schedule:
    - cron: '0 0 * * *'  # Run daily at midnight UTC
  workflow_dispatch:  # Allow manual triggers

jobs:
  update-versions:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      id-token: write
    steps:
      - name: Checkout code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@b47578312673ae6fa5b5096b330d9fbac3d116df # v4.2.1
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ secrets.AWS_REGION }}
          role-session-name: github-actions-${{ github.run_id }}

      - name: Configure Azure Credentials
        uses: azure/login@a457da9ea143d694b1b9c7c869ebb04ebe844ef5 # v2.3.0
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Get EKS versions
        id: eks
        run: |
          echo "Latest EKS Kubernetes version:"
          EKS_VERSION=$(aws eks describe-cluster-versions --output json | \
            jq -r '.clusterVersions[] | select(.status=="STANDARD_SUPPORT")' | \
            jq -r '.kubernetesPatchVersion' | sort -V | tail -1)
          echo "eks-kubernetes-$EKS_VERSION"
          echo "eks_version=$EKS_VERSION" >> $GITHUB_OUTPUT

      - name: Get AKS versions
        id: aks
        run: |
          echo "Latest AKS Kubernetes version:"
          # Get the latest major.minor version first
          LATEST_VERSION=$(az aks get-versions --location eastus --output json | \
            jq -r '.values[] | select(.isPreview != true)' | \
            jq -r '.version' | sort -V | tail -1)
          
          # Get the latest patch version for that major.minor version
          AKS_VERSION=$(az aks get-versions --location eastus --output json | \
            jq -r --arg VERSION "$LATEST_VERSION" '.values[] | select(.version==$VERSION) | .patchVersions | keys[]' | \
            sort -V | tail -1)
          echo "aks-kubernetes-$AKS_VERSION"
          echo "aks_version=$AKS_VERSION" >> $GITHUB_OUTPUT

      - name: Create and push tags
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7.0.1
        with:
          script: |
            const eksVersion = process.env.EKS_VERSION;
            const aksVersion = process.env.AKS_VERSION;
            
            // Define tag names
            const eksTagName = `eks-kubernetes-${eksVersion}`;
            const aksTagName = `aks-kubernetes-${aksVersion}`;
            
            // Get existing tags
            const { data: existingTags } = await github.rest.git.listMatchingRefs({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: 'tags/'
            });
            
            const existingTagNames = existingTags.map(tag => tag.ref.replace('refs/tags/', ''));
            console.log('Existing tags:', existingTagNames);
            
            // Check and create EKS tag if it doesn't exist
            if (!existingTagNames.includes(eksTagName)) {
              console.log(`Creating new tag: ${eksTagName}`);
              await github.rest.git.createRef({
                owner: context.repo.owner,
                repo: context.repo.repo,
                ref: `refs/tags/${eksTagName}`,
                sha: context.sha
              });
            } else {
              console.log(`Tag ${eksTagName} already exists, skipping`);
            }
            
            // Check and create AKS tag if it doesn't exist
            if (!existingTagNames.includes(aksTagName)) {
              console.log(`Creating new tag: ${aksTagName}`);
              await github.rest.git.createRef({
                owner: context.repo.owner,
                repo: context.repo.repo,
                ref: `refs/tags/${aksTagName}`,
                sha: context.sha
              });
            } else {
              console.log(`Tag ${aksTagName} already exists, skipping`);
            }
        env:
          EKS_VERSION: ${{ steps.eks.outputs.eks_version }}
          AKS_VERSION: ${{ steps.aks.outputs.aks_version }} 